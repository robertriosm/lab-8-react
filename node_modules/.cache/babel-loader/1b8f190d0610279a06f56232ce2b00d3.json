{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport './index.css';\nimport React, { useState, useEffect } from 'react';\nimport Card from './components/Card';\nimport minipekka from '../public/img/mini_pekka.png';\nimport megaknight from '../public/img/mega_knight.png';\nimport king from '../public/img/king.png';\nimport prince from '../public/img/prince.png';\nimport princess from '../public/img/princess.png';\nimport royalgiant from '../public/img/royal_giant.png';\nimport skeletons from '../public/img/skeletons.png';\nimport valkyrie from '../public/img/valkyrie.png';\nimport wizard from '../public/img/wizard.png';\n/**\r\n * este array sirve para crear las 16 cartas y relacionar dos\r\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar cardImages = [{\n  src: minipekka,\n  matched: false\n}, {\n  src: valkyrie,\n  matched: false\n}, {\n  src: prince,\n  matched: false\n}, {\n  src: skeletons,\n  matched: false\n}, {\n  src: royalgiant,\n  matched: false\n}, {\n  src: wizard,\n  matched: false\n}, {\n  src: megaknight,\n  matched: false\n}, {\n  src: princess,\n  matched: false\n}];\n/**\r\n * componente App\r\n * @returns el tablero con las 16 cartas y la info del juego\r\n */\n\nexport default function App() {\n  // array con 8 pares de cartas\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      cards = _useState2[0],\n      setCards = _useState2[1]; // contador de jugadas hechas por el jugador\n\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      turns = _useState4[0],\n      setTurns = _useState4[1]; // primer match de dos cartas iguales\n\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      choiceOne = _useState6[0],\n      setChoiceOne = _useState6[1]; // segundo match de dos cartas iguales\n\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      choiceTwo = _useState8[0],\n      setChoiceTwo = _useState8[1]; // estado de una carta volteada\n\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      disabled = _useState10[0],\n      setDisabled = _useState10[1]; // estado donde un jugador ya hizo match todas las cartas\n\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      won = _useState12[0],\n      setWon = _useState12[1];\n  /**\r\n   * funcion para verificar si todas las cartas estan levantadas,\r\n   * si lo estan el jugador gano el juego\r\n   */\n\n\n  var checkWin = function checkWin() {\n    var matches = cards.map(function (i) {\n      return i.matched;\n    });\n\n    if (matches.every(function (v) {\n      return v === true;\n    })) {\n      setWon(true);\n    } else {\n      setWon(false);\n    }\n  };\n  /**\r\n   * funcion que inicia/reinicia el juego\r\n   * genera las posiciones en el array al azar asignandoles las imagenes\r\n   * de cardImages a cards\r\n   */\n\n\n  var shuffleCards = function shuffleCards() {\n    var shuffledCards = [].concat(cardImages, cardImages).sort(function () {\n      return Math.random() - 0.5;\n    }).map(function (card) {\n      return _objectSpread(_objectSpread({}, card), {}, {\n        id: Math.random()\n      });\n    });\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setCards(shuffledCards);\n    setTurns(0);\n    setWon(false);\n    checkWin();\n  };\n  /**\r\n   * funcion que evalua el match de una carta con su pareja\r\n   * @param {*} card cada carta en el array cards\r\n   */\n\n\n  var handleChoice = function handleChoice(card) {\n    if (choiceOne) {\n      setChoiceTwo(card);\n    } else {\n      setChoiceOne(card);\n    }\n  };\n  /**\r\n   * funcion para voltear las cartas si no hacen match, se llama por el efecto arriba\r\n   */\n\n\n  var resetIt = function resetIt() {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(function (prevTurns) {\n      return prevTurns + 1;\n    });\n    setDisabled(false);\n  };\n\n  useEffect(function () {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true);\n\n      if (choiceOne.src === choiceTwo.src) {\n        setCards(function (prevCards) {\n          return prevCards.map(function (card) {\n            if (card.src === choiceOne.src) {\n              return _objectSpread(_objectSpread({}, card), {}, {\n                matched: true\n              });\n            }\n\n            return card;\n          });\n        });\n        resetIt();\n      } else {\n        setTimeout(function () {\n          return resetIt();\n        }, 1000); // ponerle 1 segundo de espera\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n  /**\r\n   * efecto para revolver las cartas al iniciar la app y  ver si el jugador ha ganado el juego\r\n   */\n\n  useEffect(function () {\n    shuffleCards();\n    checkWin();\n  }, []);\n  /**\r\n   * efecto para revolver las cartas al iniciar la app y  ver si el jugador ha ganado el juego\r\n   */\n\n  useEffect(function () {\n    checkWin();\n  });\n  /**\r\n   * mostrar en el dom el juego\r\n   */\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: \"card-grid inside-app\",\n      children: cards.map(function (card) {\n        return /*#__PURE__*/_jsx(Card, {\n          card: card,\n          handleChoice: handleChoice,\n          flipped: card === choiceOne || card === choiceTwo || card.matched,\n          disabled: disabled\n        }, card.id);\n      })\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: \"inside-app\",\n        children: [/*#__PURE__*/_jsx(\"h1\", {\n          children: \"ROYALE MEMORY GAME\"\n        }), /*#__PURE__*/_jsx(\"button\", {\n          onClick: shuffleCards,\n          type: \"submit\",\n          children: \"RESTART\"\n        }), /*#__PURE__*/_jsxs(\"p\", {\n          children: [\"JUGADAS:\", turns]\n        }), /*#__PURE__*/_jsx(\"p\", {\n          children: \"LABORATORIO 8. ROBERTO RIOS, 20979.\"\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"king\",\n        children: [won && /*#__PURE__*/_jsx(\"p\", {\n          children: \"Felicidades, Ganaste! JIJIJIJA!\"\n        }), /*#__PURE__*/_jsx(\"img\", {\n          src: king,\n          alt: \"king\",\n          height: 350\n        })]\n      })]\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}